// <auto-generated />
using System;
using FlyTonight.DAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FlyTonight.DAL.Migrations
{
    [DbContext(typeof(FlyTonightDbContext))]
    partial class FlyTonightDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DiscountFlight", b =>
                {
                    b.Property<Guid>("DiscountsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FlightsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DiscountsId", "FlightsId");

                    b.HasIndex("FlightsId");

                    b.ToTable("FlightDiscount", (string)null);

                    b.HasData(
                        new
                        {
                            DiscountsId = new Guid("7abeec0a-8840-4e72-af65-94989aa32c9d"),
                            FlightsId = new Guid("5cae9352-4511-40eb-a7f4-de0fdb9c2cbb")
                        },
                        new
                        {
                            DiscountsId = new Guid("7abeec0a-8840-4e72-af65-94989aa32c9d"),
                            FlightsId = new Guid("bcfbd6fa-89be-45f9-956d-8ad2f40c3cfa")
                        },
                        new
                        {
                            DiscountsId = new Guid("7abeec0a-8840-4e72-af65-94989aa32c9d"),
                            FlightsId = new Guid("7bc038f9-80bf-46dc-8c29-8c94b732baf8")
                        },
                        new
                        {
                            DiscountsId = new Guid("7abeec0a-8840-4e72-af65-94989aa32c9d"),
                            FlightsId = new Guid("ff5c38d8-5662-4d97-b093-9b8e0f53c057")
                        },
                        new
                        {
                            DiscountsId = new Guid("7abeec0a-8840-4e72-af65-94989aa32c9d"),
                            FlightsId = new Guid("6f01eab3-9be3-497d-b7ec-6a311bdc2b34")
                        },
                        new
                        {
                            DiscountsId = new Guid("7abeec0a-8840-4e72-af65-94989aa32c9d"),
                            FlightsId = new Guid("93d4df2d-038c-4a6a-bc76-035b019fe62e")
                        });
                });

            modelBuilder.Entity("FlightTax", b =>
                {
                    b.Property<Guid>("FlightsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TaxesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FlightsId", "TaxesId");

                    b.HasIndex("TaxesId");

                    b.ToTable("FlightTax", (string)null);

                    b.HasData(
                        new
                        {
                            FlightsId = new Guid("15a6343e-1780-4a41-b730-dd7e4c75eb55"),
                            TaxesId = new Guid("024f2996-eba3-4c83-aa42-78536c8d00a1")
                        },
                        new
                        {
                            FlightsId = new Guid("be251ce7-fb8b-49e7-b178-97297ca4c59c"),
                            TaxesId = new Guid("024f2996-eba3-4c83-aa42-78536c8d00a1")
                        },
                        new
                        {
                            FlightsId = new Guid("0237ecf2-85e3-4873-bef6-78ae56322cc4"),
                            TaxesId = new Guid("024f2996-eba3-4c83-aa42-78536c8d00a1")
                        },
                        new
                        {
                            FlightsId = new Guid("79ccbdb8-a022-4e3b-915f-974928cdf363"),
                            TaxesId = new Guid("024f2996-eba3-4c83-aa42-78536c8d00a1")
                        },
                        new
                        {
                            FlightsId = new Guid("a62e1436-9533-4635-b3ec-6a072db2031a"),
                            TaxesId = new Guid("024f2996-eba3-4c83-aa42-78536c8d00a1")
                        },
                        new
                        {
                            FlightsId = new Guid("70a1b51c-d009-44d0-ad08-c43cf5d0ab15"),
                            TaxesId = new Guid("024f2996-eba3-4c83-aa42-78536c8d00a1")
                        },
                        new
                        {
                            FlightsId = new Guid("5cae9352-4511-40eb-a7f4-de0fdb9c2cbb"),
                            TaxesId = new Guid("024f2996-eba3-4c83-aa42-78536c8d00a1")
                        },
                        new
                        {
                            FlightsId = new Guid("bcfbd6fa-89be-45f9-956d-8ad2f40c3cfa"),
                            TaxesId = new Guid("024f2996-eba3-4c83-aa42-78536c8d00a1")
                        },
                        new
                        {
                            FlightsId = new Guid("7bc038f9-80bf-46dc-8c29-8c94b732baf8"),
                            TaxesId = new Guid("024f2996-eba3-4c83-aa42-78536c8d00a1")
                        },
                        new
                        {
                            FlightsId = new Guid("4e8949ec-404c-4e5f-a47e-0898f8800a1e"),
                            TaxesId = new Guid("024f2996-eba3-4c83-aa42-78536c8d00a1")
                        },
                        new
                        {
                            FlightsId = new Guid("ff5c38d8-5662-4d97-b093-9b8e0f53c057"),
                            TaxesId = new Guid("024f2996-eba3-4c83-aa42-78536c8d00a1")
                        },
                        new
                        {
                            FlightsId = new Guid("6f01eab3-9be3-497d-b7ec-6a311bdc2b34"),
                            TaxesId = new Guid("024f2996-eba3-4c83-aa42-78536c8d00a1")
                        },
                        new
                        {
                            FlightsId = new Guid("93d4df2d-038c-4a6a-bc76-035b019fe62e"),
                            TaxesId = new Guid("024f2996-eba3-4c83-aa42-78536c8d00a1")
                        },
                        new
                        {
                            FlightsId = new Guid("9acb9c67-db21-4eb5-85b1-b7c189171b14"),
                            TaxesId = new Guid("024f2996-eba3-4c83-aa42-78536c8d00a1")
                        });
                });

            modelBuilder.Entity("FlyTonight.Domain.Models.Airport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BlobUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CityName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Airports");

                    b.HasData(
                        new
                        {
                            Id = new Guid("99961c57-3a5b-440a-86e1-a5aef4ae33e1"),
                            BlobUrl = "http://127.0.0.1:10000/devstoreaccount1/airports/bud_logo.png",
                            CityName = "Budapest",
                            Latitude = 47.431342998981528,
                            Longitude = 19.266202715990577,
                            Name = "BUD"
                        },
                        new
                        {
                            Id = new Guid("f2c82559-be2d-4aa3-ad88-3db28eaf3d34"),
                            BlobUrl = "http://127.0.0.1:10000/devstoreaccount1/airports/ams_logo.jpg",
                            CityName = "Amsterdam",
                            Latitude = 52.30710006669635,
                            Longitude = 4.7677723543914201,
                            Name = "AMS"
                        },
                        new
                        {
                            Id = new Guid("a6c28835-277e-44f1-878e-d7369c4993dd"),
                            BlobUrl = "http://127.0.0.1:10000/devstoreaccount1/airports/lut_logo.png",
                            CityName = "London",
                            Latitude = 51.879341283924852,
                            Longitude = -0.37626272040543279,
                            Name = "LUT"
                        });
                });

            modelBuilder.Entity("FlyTonight.Domain.Models.Discount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BlobUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Discounts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7abeec0a-8840-4e72-af65-94989aa32c9d"),
                            BlobUrl = "emptyurl",
                            Name = "Weekend",
                            Value = 0.10000000000000001
                        });
                });

            modelBuilder.Entity("FlyTonight.Domain.Models.Events.EnvEventBase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FlightId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FlightId")
                        .IsUnique();

                    b.ToTable("EnvEvents");

                    b.HasDiscriminator<string>("Discriminator").HasValue("EnvEventBase");
                });

            modelBuilder.Entity("FlyTonight.Domain.Models.Flight", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AirplaneId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DebuffId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FromId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("TimeOfDeparture")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ToId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AirplaneId");

                    b.HasIndex("FromId");

                    b.HasIndex("ToId");

                    b.ToTable("Flights");

                    b.HasData(
                        new
                        {
                            Id = new Guid("15a6343e-1780-4a41-b730-dd7e4c75eb55"),
                            AirplaneId = new Guid("67ec6d8e-eb94-4c6e-9a7a-6a0995895d70"),
                            DebuffId = new Guid("00000000-0000-0000-0000-000000000000"),
                            FromId = new Guid("99961c57-3a5b-440a-86e1-a5aef4ae33e1"),
                            TimeOfDeparture = new DateTime(2022, 8, 12, 6, 30, 0, 0, DateTimeKind.Unspecified),
                            ToId = new Guid("f2c82559-be2d-4aa3-ad88-3db28eaf3d34")
                        },
                        new
                        {
                            Id = new Guid("be251ce7-fb8b-49e7-b178-97297ca4c59c"),
                            AirplaneId = new Guid("6aaa9938-7900-4316-9c5c-9621c410cd52"),
                            DebuffId = new Guid("00000000-0000-0000-0000-000000000000"),
                            FromId = new Guid("99961c57-3a5b-440a-86e1-a5aef4ae33e1"),
                            TimeOfDeparture = new DateTime(2022, 8, 12, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            ToId = new Guid("f2c82559-be2d-4aa3-ad88-3db28eaf3d34")
                        },
                        new
                        {
                            Id = new Guid("0237ecf2-85e3-4873-bef6-78ae56322cc4"),
                            AirplaneId = new Guid("8c73349b-2c71-47fd-9bbe-1cbb81f71f48"),
                            DebuffId = new Guid("00000000-0000-0000-0000-000000000000"),
                            FromId = new Guid("99961c57-3a5b-440a-86e1-a5aef4ae33e1"),
                            TimeOfDeparture = new DateTime(2022, 8, 12, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            ToId = new Guid("f2c82559-be2d-4aa3-ad88-3db28eaf3d34")
                        },
                        new
                        {
                            Id = new Guid("79ccbdb8-a022-4e3b-915f-974928cdf363"),
                            AirplaneId = new Guid("08030bd5-b032-42d1-87ab-42141e1e484c"),
                            DebuffId = new Guid("00000000-0000-0000-0000-000000000000"),
                            FromId = new Guid("99961c57-3a5b-440a-86e1-a5aef4ae33e1"),
                            TimeOfDeparture = new DateTime(2022, 8, 12, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            ToId = new Guid("f2c82559-be2d-4aa3-ad88-3db28eaf3d34")
                        },
                        new
                        {
                            Id = new Guid("a62e1436-9533-4635-b3ec-6a072db2031a"),
                            AirplaneId = new Guid("d88685cb-278e-4cee-814e-241955c1cd24"),
                            DebuffId = new Guid("00000000-0000-0000-0000-000000000000"),
                            FromId = new Guid("99961c57-3a5b-440a-86e1-a5aef4ae33e1"),
                            TimeOfDeparture = new DateTime(2022, 8, 12, 16, 30, 0, 0, DateTimeKind.Unspecified),
                            ToId = new Guid("f2c82559-be2d-4aa3-ad88-3db28eaf3d34")
                        },
                        new
                        {
                            Id = new Guid("70a1b51c-d009-44d0-ad08-c43cf5d0ab15"),
                            AirplaneId = new Guid("67ec6d8e-eb94-4c6e-9a7a-6a0995895d70"),
                            DebuffId = new Guid("00000000-0000-0000-0000-000000000000"),
                            FromId = new Guid("99961c57-3a5b-440a-86e1-a5aef4ae33e1"),
                            TimeOfDeparture = new DateTime(2022, 8, 12, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            ToId = new Guid("f2c82559-be2d-4aa3-ad88-3db28eaf3d34")
                        },
                        new
                        {
                            Id = new Guid("5cae9352-4511-40eb-a7f4-de0fdb9c2cbb"),
                            AirplaneId = new Guid("67ec6d8e-eb94-4c6e-9a7a-6a0995895d70"),
                            DebuffId = new Guid("00000000-0000-0000-0000-000000000000"),
                            FromId = new Guid("99961c57-3a5b-440a-86e1-a5aef4ae33e1"),
                            TimeOfDeparture = new DateTime(2022, 8, 13, 6, 30, 0, 0, DateTimeKind.Unspecified),
                            ToId = new Guid("f2c82559-be2d-4aa3-ad88-3db28eaf3d34")
                        },
                        new
                        {
                            Id = new Guid("bcfbd6fa-89be-45f9-956d-8ad2f40c3cfa"),
                            AirplaneId = new Guid("6aaa9938-7900-4316-9c5c-9621c410cd52"),
                            DebuffId = new Guid("00000000-0000-0000-0000-000000000000"),
                            FromId = new Guid("99961c57-3a5b-440a-86e1-a5aef4ae33e1"),
                            TimeOfDeparture = new DateTime(2022, 8, 13, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            ToId = new Guid("f2c82559-be2d-4aa3-ad88-3db28eaf3d34")
                        },
                        new
                        {
                            Id = new Guid("7bc038f9-80bf-46dc-8c29-8c94b732baf8"),
                            AirplaneId = new Guid("d88685cb-278e-4cee-814e-241955c1cd24"),
                            DebuffId = new Guid("00000000-0000-0000-0000-000000000000"),
                            FromId = new Guid("99961c57-3a5b-440a-86e1-a5aef4ae33e1"),
                            TimeOfDeparture = new DateTime(2022, 8, 13, 18, 30, 0, 0, DateTimeKind.Unspecified),
                            ToId = new Guid("f2c82559-be2d-4aa3-ad88-3db28eaf3d34")
                        },
                        new
                        {
                            Id = new Guid("4e8949ec-404c-4e5f-a47e-0898f8800a1e"),
                            AirplaneId = new Guid("fe76ac24-c8b6-4d68-9f2a-4b86893e0ad5"),
                            DebuffId = new Guid("00000000-0000-0000-0000-000000000000"),
                            FromId = new Guid("99961c57-3a5b-440a-86e1-a5aef4ae33e1"),
                            TimeOfDeparture = new DateTime(2022, 8, 12, 18, 30, 0, 0, DateTimeKind.Unspecified),
                            ToId = new Guid("a6c28835-277e-44f1-878e-d7369c4993dd")
                        },
                        new
                        {
                            Id = new Guid("ff5c38d8-5662-4d97-b093-9b8e0f53c057"),
                            AirplaneId = new Guid("08030bd5-b032-42d1-87ab-42141e1e484c"),
                            DebuffId = new Guid("00000000-0000-0000-0000-000000000000"),
                            FromId = new Guid("f2c82559-be2d-4aa3-ad88-3db28eaf3d34"),
                            TimeOfDeparture = new DateTime(2022, 8, 14, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            ToId = new Guid("99961c57-3a5b-440a-86e1-a5aef4ae33e1")
                        },
                        new
                        {
                            Id = new Guid("6f01eab3-9be3-497d-b7ec-6a311bdc2b34"),
                            AirplaneId = new Guid("d88685cb-278e-4cee-814e-241955c1cd24"),
                            DebuffId = new Guid("00000000-0000-0000-0000-000000000000"),
                            FromId = new Guid("f2c82559-be2d-4aa3-ad88-3db28eaf3d34"),
                            TimeOfDeparture = new DateTime(2022, 8, 14, 13, 30, 0, 0, DateTimeKind.Unspecified),
                            ToId = new Guid("99961c57-3a5b-440a-86e1-a5aef4ae33e1")
                        },
                        new
                        {
                            Id = new Guid("93d4df2d-038c-4a6a-bc76-035b019fe62e"),
                            AirplaneId = new Guid("67ec6d8e-eb94-4c6e-9a7a-6a0995895d70"),
                            DebuffId = new Guid("00000000-0000-0000-0000-000000000000"),
                            FromId = new Guid("f2c82559-be2d-4aa3-ad88-3db28eaf3d34"),
                            TimeOfDeparture = new DateTime(2022, 8, 14, 19, 0, 0, 0, DateTimeKind.Unspecified),
                            ToId = new Guid("99961c57-3a5b-440a-86e1-a5aef4ae33e1")
                        },
                        new
                        {
                            Id = new Guid("9acb9c67-db21-4eb5-85b1-b7c189171b14"),
                            AirplaneId = new Guid("c17a3c19-7420-4f75-bc15-cad8cc100803"),
                            DebuffId = new Guid("00000000-0000-0000-0000-000000000000"),
                            FromId = new Guid("f2c82559-be2d-4aa3-ad88-3db28eaf3d34"),
                            TimeOfDeparture = new DateTime(2022, 8, 15, 12, 15, 0, 0, DateTimeKind.Unspecified),
                            ToId = new Guid("99961c57-3a5b-440a-86e1-a5aef4ae33e1")
                        });
                });

            modelBuilder.Entity("FlyTonight.Domain.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateOfPurchase")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("FlyTonight.Domain.Models.Partner", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BlobUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Partners");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e19cf9a7-f629-40ef-b0f3-56474e1c9a91"),
                            BlobUrl = "http://127.0.0.1:10000/devstoreaccount1/partners/aeroplan.jpg",
                            Name = "Aeroplan"
                        },
                        new
                        {
                            Id = new Guid("c5c95b8a-bbca-4bcd-a5e9-e5c4517c33e1"),
                            BlobUrl = "http://127.0.0.1:10000/devstoreaccount1/partners/mileageplan.jpg",
                            Name = "Mileage Plan"
                        },
                        new
                        {
                            Id = new Guid("5d00437d-48da-4b8d-9c74-65f357f182ee"),
                            BlobUrl = "http://127.0.0.1:10000/devstoreaccount1/partners/executiveclub.jpg",
                            Name = "Executive Club"
                        },
                        new
                        {
                            Id = new Guid("b79ea8b8-ca6b-47a3-8848-ba1d32f3eeee"),
                            BlobUrl = "http://127.0.0.1:10000/devstoreaccount1/partners/asiamiles.jpg",
                            Name = "Asia Miles"
                        },
                        new
                        {
                            Id = new Guid("f4113039-9133-4195-ba3b-17656e4dfecf"),
                            BlobUrl = "http://127.0.0.1:10000/devstoreaccount1/partners/oneworld.png",
                            Name = "Oneworld"
                        },
                        new
                        {
                            Id = new Guid("637431e4-c72f-4fc6-b5c7-97fe75bc7441"),
                            BlobUrl = "http://127.0.0.1:10000/devstoreaccount1/partners/staralliance.png",
                            Name = "Star Alliance"
                        });
                });

            modelBuilder.Entity("FlyTonight.Domain.Models.Plane", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CruiseHeight")
                        .HasColumnType("int");

                    b.Property<double>("CruiseSpeed")
                        .HasColumnType("float");

                    b.Property<int>("FlightDistance")
                        .HasColumnType("int");

                    b.Property<double>("FuselageLength")
                        .HasColumnType("float");

                    b.Property<string>("Registration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SeatColCount")
                        .HasColumnType("int");

                    b.Property<int>("SeatRowCount")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Wingspan")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Planes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("67ec6d8e-eb94-4c6e-9a7a-6a0995895d70"),
                            CruiseHeight = 12000,
                            CruiseSpeed = 0.81999999999999995,
                            FlightDistance = 6390,
                            FuselageLength = 39.0,
                            Registration = "HA-ABC",
                            SeatColCount = 4,
                            SeatRowCount = 27,
                            Type = "A221",
                            Wingspan = 35.0
                        },
                        new
                        {
                            Id = new Guid("6aaa9938-7900-4316-9c5c-9621c410cd52"),
                            CruiseHeight = 12000,
                            CruiseSpeed = 0.81999999999999995,
                            FlightDistance = 6390,
                            FuselageLength = 39.0,
                            Registration = "HA-DEF",
                            SeatColCount = 4,
                            SeatRowCount = 27,
                            Type = "A221",
                            Wingspan = 35.0
                        },
                        new
                        {
                            Id = new Guid("8c73349b-2c71-47fd-9bbe-1cbb81f71f48"),
                            CruiseHeight = 12100,
                            CruiseSpeed = 0.78000000000000003,
                            FlightDistance = 5930,
                            FuselageLength = 46.0,
                            Registration = "HA-VEL",
                            SeatColCount = 6,
                            SeatRowCount = 31,
                            Type = "A321",
                            Wingspan = 36.0
                        },
                        new
                        {
                            Id = new Guid("c17a3c19-7420-4f75-bc15-cad8cc100803"),
                            CruiseHeight = 12100,
                            CruiseSpeed = 0.78000000000000003,
                            FlightDistance = 5930,
                            FuselageLength = 46.0,
                            Registration = "HA-RTZ",
                            SeatColCount = 6,
                            SeatRowCount = 31,
                            Type = "A321",
                            Wingspan = 36.0
                        },
                        new
                        {
                            Id = new Guid("08030bd5-b032-42d1-87ab-42141e1e484c"),
                            CruiseHeight = 12500,
                            CruiseSpeed = 0.78500000000000003,
                            FlightDistance = 5575,
                            FuselageLength = 40.0,
                            Registration = "HA-QWE",
                            SeatColCount = 6,
                            SeatRowCount = 29,
                            Type = "B738",
                            Wingspan = 34.0
                        },
                        new
                        {
                            Id = new Guid("d88685cb-278e-4cee-814e-241955c1cd24"),
                            CruiseHeight = 12500,
                            CruiseSpeed = 0.78500000000000003,
                            FlightDistance = 5575,
                            FuselageLength = 40.0,
                            Registration = "HA-KJL",
                            SeatColCount = 6,
                            SeatRowCount = 29,
                            Type = "B738",
                            Wingspan = 34.0
                        },
                        new
                        {
                            Id = new Guid("fe76ac24-c8b6-4d68-9f2a-4b86893e0ad5"),
                            CruiseHeight = 12500,
                            CruiseSpeed = 0.78500000000000003,
                            FlightDistance = 5575,
                            FuselageLength = 40.0,
                            Registration = "HA-CCV",
                            SeatColCount = 6,
                            SeatRowCount = 29,
                            Type = "B738",
                            Wingspan = 34.0
                        });
                });

            modelBuilder.Entity("FlyTonight.Domain.Models.SeatReservation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ColNum")
                        .HasColumnType("int");

                    b.Property<Guid>("FlightId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RowNum")
                        .HasColumnType("int");

                    b.Property<Guid>("TicketId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FlightId");

                    b.HasIndex("TicketId")
                        .IsUnique();

                    b.HasIndex("RowNum", "ColNum", "FlightId")
                        .IsUnique();

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("FlyTonight.Domain.Models.Tax", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Taxes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("024f2996-eba3-4c83-aa42-78536c8d00a1"),
                            Name = "DepartureTax",
                            Value = 5000
                        },
                        new
                        {
                            Id = new Guid("0b6bd721-a40d-43e2-affc-de1646f85f8b"),
                            Name = "FlatTax",
                            Value = 2000
                        });
                });

            modelBuilder.Entity("FlyTonight.Domain.Models.Ticket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateOfPurchase")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsLuggage")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReturn")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("FlyTonight.Domain.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Nationality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("NewsletterSubscription")
                        .HasColumnType("bit");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("FlyTonight.Domain.Models.Events.DeletedFlightEvent", b =>
                {
                    b.HasBaseType("FlyTonight.Domain.Models.Events.EnvEventBase");

                    b.HasDiscriminator().HasValue("DeletedFlightEvent");
                });

            modelBuilder.Entity("FlyTonight.Domain.Models.Events.DrunkEvent", b =>
                {
                    b.HasBaseType("FlyTonight.Domain.Models.Events.EnvEventBase");

                    b.HasDiscriminator().HasValue("DrunkEvent");
                });

            modelBuilder.Entity("FlyTonight.Domain.Models.Events.ProtestingEvent", b =>
                {
                    b.HasBaseType("FlyTonight.Domain.Models.Events.EnvEventBase");

                    b.HasDiscriminator().HasValue("ProtestingEvent");
                });

            modelBuilder.Entity("FlyTonight.Domain.Models.Events.RainEvent", b =>
                {
                    b.HasBaseType("FlyTonight.Domain.Models.Events.EnvEventBase");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2");

                    b.HasDiscriminator().HasValue("RainEvent");
                });

            modelBuilder.Entity("FlyTonight.Domain.Models.Events.WrongAirportEvent", b =>
                {
                    b.HasBaseType("FlyTonight.Domain.Models.Events.EnvEventBase");

                    b.HasDiscriminator().HasValue("WrongAirportEvent");
                });

            modelBuilder.Entity("DiscountFlight", b =>
                {
                    b.HasOne("FlyTonight.Domain.Models.Discount", null)
                        .WithMany()
                        .HasForeignKey("DiscountsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlyTonight.Domain.Models.Flight", null)
                        .WithMany()
                        .HasForeignKey("FlightsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FlightTax", b =>
                {
                    b.HasOne("FlyTonight.Domain.Models.Flight", null)
                        .WithMany()
                        .HasForeignKey("FlightsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlyTonight.Domain.Models.Tax", null)
                        .WithMany()
                        .HasForeignKey("TaxesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FlyTonight.Domain.Models.Events.EnvEventBase", b =>
                {
                    b.HasOne("FlyTonight.Domain.Models.Flight", "Flight")
                        .WithOne("EnvEvent")
                        .HasForeignKey("FlyTonight.Domain.Models.Events.EnvEventBase", "FlightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Flight");
                });

            modelBuilder.Entity("FlyTonight.Domain.Models.Flight", b =>
                {
                    b.HasOne("FlyTonight.Domain.Models.Plane", "Airplane")
                        .WithMany("Flights")
                        .HasForeignKey("AirplaneId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FlyTonight.Domain.Models.Airport", "From")
                        .WithMany("OutboundFlights")
                        .HasForeignKey("FromId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FlyTonight.Domain.Models.Airport", "To")
                        .WithMany("InboundFlights")
                        .HasForeignKey("ToId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Airplane");

                    b.Navigation("From");

                    b.Navigation("To");
                });

            modelBuilder.Entity("FlyTonight.Domain.Models.Order", b =>
                {
                    b.HasOne("FlyTonight.Domain.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("FlyTonight.Domain.Models.SeatReservation", b =>
                {
                    b.HasOne("FlyTonight.Domain.Models.Flight", "Flight")
                        .WithMany("Reservations")
                        .HasForeignKey("FlightId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FlyTonight.Domain.Models.Ticket", "Ticket")
                        .WithOne("Reservation")
                        .HasForeignKey("FlyTonight.Domain.Models.SeatReservation", "TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Flight");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("FlyTonight.Domain.Models.Ticket", b =>
                {
                    b.HasOne("FlyTonight.Domain.Models.Order", "Order")
                        .WithMany("Tickets")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("FlyTonight.Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("FlyTonight.Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlyTonight.Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("FlyTonight.Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FlyTonight.Domain.Models.Airport", b =>
                {
                    b.Navigation("InboundFlights");

                    b.Navigation("OutboundFlights");
                });

            modelBuilder.Entity("FlyTonight.Domain.Models.Flight", b =>
                {
                    b.Navigation("EnvEvent");

                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("FlyTonight.Domain.Models.Order", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("FlyTonight.Domain.Models.Plane", b =>
                {
                    b.Navigation("Flights");
                });

            modelBuilder.Entity("FlyTonight.Domain.Models.Ticket", b =>
                {
                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("FlyTonight.Domain.Models.User", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
